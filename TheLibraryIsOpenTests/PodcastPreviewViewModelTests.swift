@testable import TheLibraryIsOpen
import XCTest

class PodcastPreviewViewModelTests: XCTestCase {

    var sut: PodcastPreviewViewModel!
    
    override func setUp() {
        var podcast = Podcast(id: 1055685246, title: "Under the Radar")
        podcast.episodes = [Episode]()
        podcast.episodes?.append(Episode(podcastId: 1055685246, title: "1: Adapting to the Market", filesize: 19600000))
        podcast.episodes?.append(Episode(podcastId: 1055685246, title: "2: Time for Swift", filesize: 20600000))
        podcast.episodes?.append(Episode(podcastId: 1055685246, title: "3: Ergonomics", filesize: 20300000))
        
        let dataManager = DataManager(database: LocalDatabase())
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
    }
    
    override func tearDown() {
        sut = nil
        setenv("SimulatedFreeDiskSpaceInBytes", "40000000000", 1)
    }
    
    // MARK: - Episode List
    func test_checkIfMeetsAllRequirementsToContinue_whenUserUnselectsAllOnEpisodeList_shouldDisplayNoEpisodeSelectedAlert() throws {
        sut.unselectAllEpisodes()
        sut.checkIfMeetsAllRequirementsToContinue()
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, "No Episode Selected")
    }
    
    func test_checkIfMeetsAllRequirementsToContinue_whenUserKeepsAllEpisodesSelected_shouldDisplayConfirmationAlert() throws {
        sut.checkIfMeetsAllRequirementsToContinue()
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, String(format: LocalizableStrings.PodcastPreview.Messages.readyToDownloadMultipleEpisodesConfirmationTitle, 3, "Under the Radar"))
    }
    
    func test_checkIfMeetsAllRequirementsToContinue_whenDeviceWillHaveVeryLowStorageAfterDownload_shouldDisplayLowStorageWarning() throws {
        setenv("SimulatedFreeDiskSpaceInBytes", "2000000000", 1)
        sut.checkIfMeetsAllRequirementsToContinue()
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, "Unable To Continue")
    }
    
    func test_persistPodcastLocally_whenNoIssues_shouldReturnTrue() throws {
        XCTAssertEqual(sut.persistPodcastLocally(), true)
    }
    
    func test_persistPodcastLocally_whenPodcastAlreadyPersisted_shouldDisplayPodcastAlreadyExistsAlert() throws {
        XCTAssertEqual(sut.persistPodcastLocally(), true)
        XCTAssertEqual(sut.persistPodcastLocally(), false)
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, "This Podcast was Already Archived")
    }

}
