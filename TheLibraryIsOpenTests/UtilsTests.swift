@testable import TheLibraryIsOpen
import XCTest

class UtilsTests: XCTestCase {

    func dateFromString(_ isoDate: String) -> Date {
        let dateFormatter = ISO8601DateFormatter()
        return dateFormatter.date(from: isoDate)!
    }
    
    func testGetSubtituloPodcast_ApenasUmEpisodio() throws {
        var episodes = [Episode]()
        episodes.append(Episode(id: "165108622", titulo: "#01 - Emmy Rainha, VMA nadinha!", dataPublicacao: dateFromString("2014-08-28T04:55:17+0000")))
        
        let subtitulo = Utils.getSubtituloPodcast(episodes: episodes)
        
        XCTAssertEqual(subtitulo, "1 episode · 2014")
    }
    
    func testGetSubtituloPodcast_MaisDeUmEpisodio_TodosNoMesmoAno() throws {
        var episodes = [Episode]()
        episodes.append(Episode(id: "907234705", titulo: "#03 - Fofocando sobre Famosos", dataPublicacao: dateFromString("2014-09-11T05:09:01+0000")))
        episodes.append(Episode(id: "344300838", titulo: "#02 - Vazou foto nua na internet", dataPublicacao: dateFromString("2014-09-04T02:25:46+0000")))
        episodes.append(Episode(id: "165108622", titulo: "#01 - Emmy Rainha, VMA nadinha!", dataPublicacao: dateFromString("2014-08-28T04:55:17+0000")))
        
        let subtitulo = Utils.getSubtituloPodcast(episodes: episodes)
        
        XCTAssertEqual(subtitulo, "3 episodes · 2014")
    }
    
    func testGetSubtituloPodcast_MaisDeUmEpisodio_AnosDiferentes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(id: "907234705", titulo: "O Wanda agora está no Spotify!", dataPublicacao: dateFromString("2020-10-08T17:28:52+0000")))
        episodes.append(Episode(id: "344300838", titulo: "#158 - As versões forró de música pop", dataPublicacao: dateFromString("2017-09-28T15:14:16+0000")))
        episodes.append(Episode(id: "165108622", titulo: "#01 - Emmy Rainha, VMA nadinha!", dataPublicacao: dateFromString("2014-08-28T04:55:17+0000")))
        
        let subtitulo = Utils.getSubtituloPodcast(episodes: episodes)
        
        XCTAssertEqual(subtitulo, "3 episodes · 2014-2020")
    }
    
    func testGetTamanhoEpisodios_NenhumEpisodio_DeveRetornarStringEmBranco() throws {
        let episodes = [Episode]()
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), "")
    }

    func testGetTamanhoEpisodios_UmEpisodioPequeno_DeveRetornarValorEmBytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(tamanho: 78))
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), " (78 bytes)")
    }
    
    func testGetTamanhoEpisodios_UmEpisodioMedio_DeveRetornarValorEmMegabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(tamanho: 1308040))
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), " (1.3 MB)")
    }
    
    func testGetTamanhoEpisodios_UmEpisodioGrande_DeveRetornarValorEmGigabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(tamanho: 1308040000))
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), " (1.31 GB)")
    }
    
    func testGetTamanhoEpisodios_VariosEpisodiosGrandes_DeveRetornarValorEmGigabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(tamanho: 13080400000))
        episodes.append(Episode(tamanho: 13080400000))
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), " (26.16 GB)")
    }
    
    func testGetTamanhoEpisodios_VariosEpisodiosMuitoGrandes_DeveRetornarValorEmGigabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(tamanho: 130804000000))
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), " (130.8 GB)")
    }
    
    func testGetTamanhoEpisodios_VariosEpisodiosMuitoGrandes_DeveRetornarValorEmTerabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(tamanho: 700804000000))
        episodes.append(Episode(tamanho: 200804000000))
        episodes.append(Episode(tamanho: 260804000000))
        XCTAssertEqual(Utils.getSize(ofEpisodes: episodes), " (1.16 TB)")
    }

}
