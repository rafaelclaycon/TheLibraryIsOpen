@testable import TheLibraryIsOpen
import XCTest

class UtilsTests: XCTestCase {

    private func dateFromString(_ isoDate: String) -> Date {
        let dateFormatter = ISO8601DateFormatter()
        return dateFormatter.date(from: isoDate)!
    }
    
    // MARK: - Podcast Subtitle (e.g., 300 episodes · 2007-2014)
    func test_getPodcastSubtitle_whenSingleEpisode_shouldReturnCorrectSubtitle() throws {
        var episodes = [Episode]()
        episodes.append(Episode(id: "165108622", title: "#01 - Emmy Rainha, VMA nadinha!", pubDate: dateFromString("2014-08-28T04:55:17+0000")))
        
        let subtitulo = Utils.getPodcastSubtitle(episodes: episodes)
        
        XCTAssertEqual(subtitulo, "1 episode · 2014")
    }
    
    func test_getPodcastSubtitle_whenMoreThanOneEpisodeAllInTheSameYear_shouldReturnCorrectSubtitle() throws {
        var episodes = [Episode]()
        episodes.append(Episode(id: "907234705", title: "#03 - Fofocando sobre Famosos", pubDate: dateFromString("2014-09-11T05:09:01+0000")))
        episodes.append(Episode(id: "344300838", title: "#02 - Vazou foto nua na internet", pubDate: dateFromString("2014-09-04T02:25:46+0000")))
        episodes.append(Episode(id: "165108622", title: "#01 - Emmy Rainha, VMA nadinha!", pubDate: dateFromString("2014-08-28T04:55:17+0000")))
        
        let subtitulo = Utils.getPodcastSubtitle(episodes: episodes)
        
        XCTAssertEqual(subtitulo, "3 episodes · 2014")
    }
    
    func test_getPodcastSubtitle_whenMoreThanOneEpisodeDifferentYears_shouldReturnCorrectSubtitle() throws {
        var episodes = [Episode]()
        episodes.append(Episode(id: "907234705", title: "O Wanda agora está no Spotify!", pubDate: dateFromString("2020-10-08T17:28:52+0000")))
        episodes.append(Episode(id: "344300838", title: "#158 - As versões forró de música pop", pubDate: dateFromString("2017-09-28T15:14:16+0000")))
        episodes.append(Episode(id: "165108622", title: "#01 - Emmy Rainha, VMA nadinha!", pubDate: dateFromString("2014-08-28T04:55:17+0000")))
        
        let subtitulo = Utils.getPodcastSubtitle(episodes: episodes)
        
        XCTAssertEqual(subtitulo, "3 episodes · 2014-2020")
    }
    
    // MARK: - Episode Size String
    func test_getSize_whenNoEpisode_shouldReturnEmptyString() throws {
        let episodes = [Episode]()
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), "")
    }

    func test_getSize_whenSingleEpisodeReportsBytes_shouldReturnEmptyString() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 78))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), "")
    }
    
    func test_getSize_whenSingleEpisodeReportsMegabytes_shouldReturnValueInMegabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 1308040))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), " (1.3 MB)")
    }
    
    func test_getSize_whenSingleEpisodeReportsGigabytes_shouldReturnValueInGigabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 1308040000))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), " (1.31 GB)")
    }
    
    func test_getSize_whenManyEpisodesReportJustBytes_shouldReturnEmptyString() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 2000))
        episodes.append(Episode(filesize: 4000))
        episodes.append(Episode(filesize: 7000))
        episodes.append(Episode(filesize: 3000))
        episodes.append(Episode(filesize: 3000))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), "")
    }
    
    func test_getSize_whenManyEpisodesReportJustMegabytes_shouldReturnEmptyString() throws {
        var episodes = [Episode]()
        
        episodes.append(Episode(filesize: 200000))
        episodes.append(Episode(filesize: 400000))
        episodes.append(Episode(filesize: 700000))
        episodes.append(Episode(filesize: 300000))
        episodes.append(Episode(filesize: 300000))
        
        episodes.append(Episode(filesize: 200000))
        episodes.append(Episode(filesize: 400000))
        episodes.append(Episode(filesize: 700000))
        episodes.append(Episode(filesize: 300000))
        episodes.append(Episode(filesize: 300000))
        
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), "")
    }
    
    func test_getSize_whenManyEpisodesReportGigabytes_shouldReturnValueInGigabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 13080400000))
        episodes.append(Episode(filesize: 13080400000))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), " (26.16 GB)")
    }
    
    func test_getSize_whenManyEpisodesReportManyGigabytes_shouldReturnValueInGigabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 130804000000))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), " (130.8 GB)")
    }
    
    func test_getSize_whenManyEpisodesReportMoreThanATerabyte_shouldReturnValueInTerabytes() throws {
        var episodes = [Episode]()
        episodes.append(Episode(filesize: 700804000000))
        episodes.append(Episode(filesize: 200804000000))
        episodes.append(Episode(filesize: 260804000000))
        XCTAssertEqual(Utils.getSizeOf(episodes: episodes), " (1.16 TB)")
    }

}
