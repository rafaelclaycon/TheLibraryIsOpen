@testable import TheLibraryIsOpen
import XCTest

class LocalStorageTests: XCTestCase {

    let storage = LocalStorage()
    let testEpisodes: [Episode]? = nil

    override func setUpWithError() throws {
        XCTAssertEqual(try storage.getPodcastCount(), 0)
        XCTAssertEqual(try storage.getEpisodeCount(), 0)
    }

    override func tearDownWithError() throws {
        XCTAssertNoThrow(try storage.deleteAllPodcasts())
        XCTAssertNoThrow(try storage.deleteAllEpisodes())
    }

    func testInsertPodcastsIntoDB() {
        let podcasts = TheLibraryIsOpenService.getPodcasts()
        for podcast in podcasts {
            XCTAssertNoThrow(try storage.insert(podcast: podcast))
        }
        XCTAssertEqual(try storage.getPodcastCount(), 1)
    }

    func testInsertEpisodesIntoDB() {
        var testEpisodes = [Episode]()

        testEpisodes.append(Episode(id: "1", idPodcast: 1, titulo: "Lorem ipsum dolor sit amet", dataPublicacao: Date(), duracao: 300, urlRemoto: "", tamanho: 0))
        testEpisodes.append(Episode(id: "2", idPodcast: 1, titulo: "Consectetur adipiscing elit", dataPublicacao: Date(), duracao: 300, urlRemoto: "", tamanho: 0))
        testEpisodes.append(Episode(id: "3", idPodcast: 1, titulo: "Sed do eiusmod tempor", dataPublicacao: Date(), duracao: 300, urlRemoto: "", tamanho: 0))

        for episode in testEpisodes {
            XCTAssertNoThrow(try storage.insert(episode: episode))
        }

        XCTAssertEqual(try storage.getAllEpisodes(forID: 1).count, 3)
    }

}
