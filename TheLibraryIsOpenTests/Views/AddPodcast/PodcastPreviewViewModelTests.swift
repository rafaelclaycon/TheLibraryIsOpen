@testable import TheLibraryIsOpen
import XCTest

class PodcastPreviewViewModelTests: XCTestCase {
    
    // Dependencies
    private var podcast: Podcast!
    private var dataManager: DataManager!

    private var sut: PodcastPreviewViewModel!
    
    override func setUp() {
        podcast = Podcast.getMockPodcast()
        dataManager = DataManager(database: LocalDatabase())
    }
    
    override func tearDown() {
        sut = nil
        setenv("SimulatedFreeDiskSpaceInBytes", "40000000000", 1)
    }
    
    // MARK: - Download Button
    
    func test_checkIfMeetsAllRequirementsToContinue_whenUserUnselectsAllOnEpisodeList_shouldDisplayNoEpisodeSelectedAlert() throws {
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        sut.unselectAllEpisodes()
        sut.checkIfMeetsAllRequirementsToContinue()
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, "No Episode Selected")
    }
    
    func test_checkIfMeetsAllRequirementsToContinue_whenUserKeepsAllEpisodesSelected_shouldDisplayConfirmationAlert() throws {
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        sut.checkIfMeetsAllRequirementsToContinue()
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, String(format: LocalizableStrings.PodcastPreview.Messages.readyToDownloadMultipleEpisodesConfirmationTitle, 10, "Accidental Tech Podcast"))
    }
    
    func test_checkIfMeetsAllRequirementsToContinue_whenDeviceWillHaveVeryLowStorageAfterDownload_shouldDisplayLowStorageWarning() throws {
        setenv("SimulatedFreeDiskSpaceInBytes", "2000000000", 1)
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        sut.checkIfMeetsAllRequirementsToContinue()
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, "Unable To Continue")
    }
    
    // TODO: - Fix this test
//    func test_persistPodcastLocally_whenNoIssues_shouldReturnTrue() throws {
//        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
//        XCTAssertEqual(sut.persistPodcastLocally(), true)
//    }
    
    func test_persistPodcastLocally_whenPodcastAlreadyPersisted_shouldDisplayPodcastAlreadyExistsAlert() throws {
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        XCTAssertEqual(sut.persistPodcastLocally(), true)
        XCTAssertEqual(sut.persistPodcastLocally(), false)
        XCTAssertEqual(sut.displayAlert, true)
        XCTAssertEqual(sut.alertTitle, "This Podcast was Already Archived")
    }
    
    // MARK: - Remaining Storage Label
    
    // Note: updateRemainingStorageLabel(selectedIDs:) needs to be called below because that's actually
    // what's called by the view when the selection changes and we're simulating the view.
    
    func test_showRemainingStorage_whenUserJustEnteredScreen_shouldDisplayRemainingStorage() throws {
        // Given that I have 49.9 GB of free space
        setenv("SimulatedFreeDiskSpaceInBytes", "49900000000", 1)
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        
        // And all episodes are selected because that's the screen default
        // Then I see the free storage label
        // And I see that it shows total free storage minus the sum of all episode filesizes
        XCTAssertEqual(sut.remainingStorageLabel, "48.95 GB remaining on this iPhone.")
    }
    
    func test_showRemainingStorage_whenUserTapsUnselectAll_shouldDisplayTheDevicesTotalRemainingStorage() throws {
        // Given that I have 49.9 GB of free space
        setenv("SimulatedFreeDiskSpaceInBytes", "49900000000", 1)
        
        // When I enter the Podcast Preview screen
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        
        // And I tap the Unselect All button
        sut.updateRemainingStorageLabel(selectedIDs: [String]())
        
        // Then I see the total remaining storage from the device because no episode is selected
        XCTAssertEqual(sut.remainingStorageLabel, "49.9 GB remaining on this iPhone.")
    }
    
    func test_showRemainingStorage_whenUserPicksSomeEpisodes_shouldDisplayRemainingStorage() throws {
        // Given that I have 49.9 GB of free space
        setenv("SimulatedFreeDiskSpaceInBytes", "49900000000", 1)
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        
        // When I select 3 out of 10 episodes
        var selected = [String]()
        for id in Podcast.getThreeEpisodeIDs() {
            selected.append(id)
        }
        sut.updateRemainingStorageLabel(selectedIDs: selected)
        
        // Then I see the update free storage label
        // And I see that it is total free space minus the selected part
        XCTAssertEqual(sut.remainingStorageLabel, "49.51 GB remaining on this iPhone.")
    }
    
    func test_showRemainingStorage_whenSelectedEpisodesSizeSurpassesDeviceFreeStorage_shouldDisplayCannotDownload() throws {
        // Given that I have 49.9 GB of free space
        setenv("SimulatedFreeDiskSpaceInBytes", "5000000000", 1)
        podcast = nil
        podcast = Podcast.getMockPodcastWithHugeEpisodes()
        sut = PodcastPreviewViewModel(podcast: podcast, podcastPreviewDataManager: dataManager)
        
        // When I select 3 out of 10 episodes
        var selected = [String]()
        for episode in sut.episodes {
            selected.append(episode.id)
        }
        sut.updateRemainingStorageLabel(selectedIDs: selected)
        
        // Then I see the update free storage label
        // And I see that it is total free space minus the selected part
        XCTAssertEqual(sut.remainingStorageLabel, "Unable to continue. 1.81 GB over free storage (5 GB). Either free up space on the device or select less episodes.")
    }

}
