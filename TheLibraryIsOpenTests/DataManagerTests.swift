//
//  DataManagerTests.swift
//  TheLibraryIsOpenTests
//
//  Created by Rafael Schmitt on 01/12/20.
//

@testable import TheLibraryIsOpen
import XCTest

class DataManagerTests: XCTestCase {
    let storage = LocalStorage()
    var manager: DataManager?
    let testPodcastID: Int = 123
    let testFeedURL = "https://praiadosossos.libsyn.com/rss"

    override func setUpWithError() throws {
        XCTAssertEqual(try storage.getPodcastCount(), 0)
        XCTAssertEqual(try storage.getEpisodeCount(), 0)
    }

    override func tearDownWithError() throws {
        manager = nil
        XCTAssertNoThrow(try storage.deleteAllPodcasts())
        XCTAssertNoThrow(try storage.deleteAllEpisodes())
    }

    func fakePodcastFetch() -> [Podcast] {
        var podcasts = [Podcast]()
        podcasts.append(Podcast(id: testPodcastID, title: "Praia dos Ossos", author: "Rádio Novelo", episodes: nil, feedURL: testFeedURL, artworkURL: ""))
        return podcasts
    }

    func testGetEpisodesWithoutCache() throws {
        // Given that I haven't opened the app before
        let e = expectation(description: "Fetch episodes from remote server")
        var testEpisodes = [Episode]()

        // When I open it
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)

        // Then it fetches all episodes from the remote server
        manager?.getEpisodes(forPodcastID: testPodcastID, feedURL: testFeedURL) { episodes, error in
            guard error == nil else {
                fatalError(error.debugDescription)
            }
            guard let episodes = episodes else {
                return print("Episodes is empty.")
            }
            testEpisodes.append(contentsOf: episodes)
            e.fulfill()
        }

        // And I see a list of episodes for that podcast
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertEqual(testEpisodes.count, 9)
        }
    }

    func testGetEpisodesWithCache() throws {
        // Given that I have opened the app before
        let e = expectation(description: "Fetch episodes from remote server")
        var testEpisodes = [Episode]()

        try storage.insert(podcast: Podcast(id: testPodcastID, title: "Praia dos Ossos", author: "Rádio Novelo", episodes: nil, feedURL: testFeedURL, artworkURL: ""))
        try storage.insert(episode: Episode(id: "abc", podcastID: testPodcastID, title: "Fake Episode 1", pubDate: Date(), duration: 300, remoteURL: "", localFilePath: nil))
        try storage.insert(episode: Episode(id: "def", podcastID: testPodcastID, title: "Fake Episode 2", pubDate: Date(), duration: 350, remoteURL: "", localFilePath: nil))

        // When I open it
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)

        // Then it fetches all episodes from the local database
        manager?.getEpisodes(forPodcastID: testPodcastID, feedURL: testFeedURL) { episodes, error in
            guard error == nil else {
                fatalError(error.debugDescription)
            }
            guard let episodes = episodes else {
                return print("Episodes is empty.")
            }
            testEpisodes.append(contentsOf: episodes)
            e.fulfill()
        }

        // And I see a list of episodes for that podcast
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertEqual(testEpisodes.count, 2)
        }
    }
    
    func testGetPodcastIdFromPodcastsURL_Length9() throws {
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)
        
        let applePodcastsURL = "https://podcasts.apple.com/br/podcast/um-milkshake-chamado-wanda/id916378162"
        
        let id = try manager?.getIDFromURL(applePodcastsURL)
        XCTAssertEqual(id, 916378162)
    }
    
    func testGetPodcastIdFromPodcastsURL_Length10() throws {
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)
        
        let applePodcastsURL = "https://podcasts.apple.com/br/podcast/praia-dos-ossos/id1528797207"
        
        let id = try manager?.getIDFromURL(applePodcastsURL)
        XCTAssertEqual(id, 1528797207)
    }
    
    func testDownloadiTunesJSON() throws {
        let e = expectation(description: "Fetch podcast details from iTunes server")
        var testFilePath: String = ""
        
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)
        
        let itunesQueryLink = "https://itunes.apple.com/lookup?id=916378162&entity=podcast"
        
        manager?.downloadiTunesJSON(link: itunesQueryLink, podcastID: 916378162) { filePath, error in
            guard error == nil else {
                fatalError(error!.localizedDescription)
            }
            guard filePath != nil else {
                fatalError()
            }
            guard let url = URL(string: filePath!) else {
                fatalError()
            }
            testFilePath = url.relativePath
            e.fulfill()
        }
        
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertTrue(testFilePath.contains("/Documents/Podcasts/916378162/ConsultaiTunes.json"))
        }
    }
    
    func testGetFeedURL() throws {
        let e = expectation(description: "Fetch podcast RSS feed")
        var testFeedURL: String = ""
        
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)
        
        let applePodcastsURL = "https://podcasts.apple.com/br/podcast/um-milkshake-chamado-wanda/id916378162"
        
        try manager?.getFeedDetails(applePodcastsURL: applePodcastsURL) { feedDetails, error in
            guard error == nil else {
                fatalError(error!.localizedDescription)
            }
            guard feedDetails != nil else {
                fatalError()
            }
            testFeedURL = feedDetails?.feedUrl ?? ""
            e.fulfill()
        }
        
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertEqual(testFeedURL, "https://feeds.soundcloud.com/users/soundcloud:users:110149054/sounds.rss")
        }
    }
    
    func testAjusteURLHTTP() throws {
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)
        
        let url = "http://feeds.soundcloud.com/users/soundcloud:users:110149054/sounds.rss"
        
        let urlAjustado = try manager?.ajustar_URL_HTTP_Para_HTTPS(url)
        XCTAssertEqual(urlAjustado, "https://feeds.soundcloud.com/users/soundcloud:users:110149054/sounds.rss")
    }
    
    func testGetPodcast() throws {
        let e = expectation(description: "Fetch podcast")
        var testPodcast = Podcast(id: 0)
        
        // Dado que eu abri o app
        manager = DataManager(storage: storage, fetchMethod: fakePodcastFetch)
        
        // Então eu vejo a tela Extrair Episódios
        
        // Quando eu informo um link de podcast
        let applePodcastsURL = "https://podcasts.apple.com/br/podcast/um-milkshake-chamado-wanda/id916378162"
        
        // E eu toco em Inspecionar Link
        try manager?.obterPodcast(applePodcastsURL: applePodcastsURL) { podcast, error in
            guard error == nil else {
                fatalError(error!.localizedDescription)
            }
            guard let podcast = podcast else {
                fatalError()
            }
            testPodcast.id = podcast.id
            testPodcast.title = podcast.title
            testPodcast.author = podcast.author
            testPodcast.feedURL = podcast.feedURL
            e.fulfill()
        }
        
        // Então eu vejo a tela de detalhes do podcast
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertEqual(testPodcast.id, 916378162)
            XCTAssertEqual(testPodcast.title, "Um Milkshake Chamado Wanda")
            XCTAssertEqual(testPodcast.author, "Um Milkshake Chamado Wanda")
            XCTAssertEqual(testPodcast.feedURL, "https://feeds.soundcloud.com/users/soundcloud:users:110149054/sounds.rss")
        }
    }
}
