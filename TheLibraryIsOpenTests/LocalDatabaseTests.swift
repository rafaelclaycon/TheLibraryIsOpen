@testable import TheLibraryIsOpen
import XCTest

class LocalDatabaseTests: XCTestCase {

    let sut = LocalDatabase()
    let testEpisodes: [Episode]? = nil

    override func setUpWithError() throws {
        XCTAssertEqual(try sut.getPodcastCount(), 0)
        XCTAssertEqual(try sut.getEpisodeCount(), 0)
    }

    override func tearDownWithError() throws {
        XCTAssertNoThrow(try sut.deleteAllPodcasts())
        XCTAssertNoThrow(try sut.deleteAllEpisodes())
    }

    func test_insertPodcast_whenInsertsPodcast_shouldReturnPodcastCount1() {
        let podcasts = TheLibraryIsOpenService.getPodcasts()
        for podcast in podcasts {
            XCTAssertNoThrow(try sut.insert(podcast: podcast))
        }
        XCTAssertEqual(try sut.getPodcastCount(), 1)
    }

    func test_getAllEpisodes_whenThereAreEpisodesInTheDB_shouldReturnEpisodeCount() {
        var testEpisodes = [Episode]()

        testEpisodes.append(Episode(id: "1", podcastId: 1, title: "Lorem ipsum dolor sit amet", pubDate: Date(), duration: 300, remoteUrl: .empty, filesize: 0))
        testEpisodes.append(Episode(id: "2", podcastId: 1, title: "Consectetur adipiscing elit", pubDate: Date(), duration: 300, remoteUrl: .empty, filesize: 0))
        testEpisodes.append(Episode(id: "3", podcastId: 1, title: "Sed do eiusmod tempor", pubDate: Date(), duration: 300, remoteUrl: .empty, filesize: 0))

        for episode in testEpisodes {
            XCTAssertNoThrow(try sut.insert(episode: episode))
        }

        XCTAssertEqual(try sut.getAllEpisodes(forID: 1).count, 3)
    }
    
    func test_exists_whenPodcastDoesNotExist_shouldReturnFalse() {
        let podcast = Podcast(id: 1000)
        
        XCTAssertNoThrow(try sut.insert(podcast: podcast))
        
        XCTAssertEqual(try sut.exists(podcastId: 1001), false)
    }
    
    func test_exists_whenPodcastExists_shouldReturnTrue() {
        let podcast = Podcast(id: 1000)

        XCTAssertNoThrow(try sut.insert(podcast: podcast))

        XCTAssertEqual(try sut.exists(podcastId: 1000), true)
    }

}
