@testable import TheLibraryIsOpen
import XCTest

class LocalAuthenticationSidekickTests: XCTestCase {

    var contextStub: LAContextStub!
    var sut: LocalAuthenticationSidekick!
    
    override func setUpWithError() throws {
        try super.setUpWithError()
        contextStub = .init()
        sut = LocalAuthenticationSidekick(context: contextStub)
    }
    
    override func tearDownWithError() throws {
        sut = nil
        contextStub = nil
        try super.tearDownWithError()
    }
    
    func test_whenUserIsSuccessfullyAuthenticated_shouldReturnTrue() throws {
        let e = expectation(description: "Check authentication")
        var testResult: Bool? = nil
        
        contextStub.authenticationShouldSucceed = true
        
        sut.authenticated(reasonToAuthenticate: "") { result in
            testResult = result
            e.fulfill()
        }
        
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertNotNil(testResult)
            XCTAssertTrue(testResult!)
        }
    }
    
    func test_whenUserIsNotAuthenticated_shouldReturnFalse() throws {
        let e = expectation(description: "Check authentication")
        var testResult: Bool? = nil
        
        contextStub.authenticationShouldSucceed = false
        
        sut.authenticated(reasonToAuthenticate: "") { result in
            testResult = result
            e.fulfill()
        }
        
        waitForExpectations(timeout: 5.0) { error in
            if let error = error {
                XCTFail("timeout errored: \(error)")
            }
            XCTAssertNotNil(testResult)
            XCTAssertFalse(testResult!)
        }
    }

}
