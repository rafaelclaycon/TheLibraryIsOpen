import XCTest
@testable import TheLibraryIsOpen

class LinkWizardTests: XCTestCase {

    // MARK: - Get ID From URL
    func test_getIdFromUrl_whenURLIsRegularApplePodcastsURL_andIDHas9Digits_shouldReturnPodcastID() throws {
        let testURL = "https://podcasts.apple.com/br/podcast/um-milkshake-chamado-wanda/id916378162"
        let expectedID = 916378162
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    func test_getIdFromUrl_whenURLIsRegularApplePodcastsURL_andIDHas10Digits_shouldReturnPodcastID() throws {
        let testURL = "https://podcasts.apple.com/br/podcast/praia-dos-ossos/id1528797207"
        let expectedID = 1528797207
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    // With ? at the end
    func test_getIdFrom_whenURLIsApplePodcastsURLWithAdditionalInfoAtTheEnd_shouldReturnPodcastID() throws {
        let testURL = "https://geo.itunes.apple.com/ca/podcast/feed/id617416468?at=11lLuB"
        let expectedID = 617416468
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    // Castro
    func test_getIdFromUrl_whenURLIsCastroPodcastURL_shouldReturnPodcastID() throws {
        let testURL = "https://castro.fm/podcast/8e5f0a3f-3e1a-47d2-8657-75483da39d9c"
        let expectedID = 617416468
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    func test_getIdFromUrl_whenURLIsCastroEpisodeURL_shouldReturnPodcastID() throws {
        let testURL = "https://castro.fm/episode/Ix6aE0"
        let expectedID = 617416468
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    // Overcast

    // Note: As of version 2022.1, Overcast does not offer an option to get the podcast link from its podcast page.
    
    func test_getIdFromUrl_whenURLIsOvercastEpisodeURL_shouldReturnPodcastID() throws {
        let testURL = "https://overcast.fm/+R7DUCyttk"
        let expectedID = 617416468
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    // Pocket Casts
    func test_getIdFromUrl_whenURLIsPocketCastsPodcastURL_shouldReturnPodcastID() throws {
        let testURL = "https://pca.st/podcast/e7abe050-6cc7-0130-f8c5-723c91aeae46"
        let expectedID = 617416468
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    func test_getIdFromUrl_whenURLIsPocketCastsEpisodeURL_shouldReturnPodcastID() throws {
        let testURL = "https://pca.st/62wamcsk"
        let expectedID = 617416468
        XCTAssertEqual(try LinkWizard.getIdFrom(url: testURL), expectedID)
    }
    
    func test_getIdFromUrl_whenURLIsPocketCastsEpisodeURL_butTheInnerApplePodcastsLinkIsInvalid_shouldThrowException() throws {
        let testURL = "https://pca.st/episode/673487eb-d73c-492e-8931-73b8b3e892c3"
        XCTAssertThrowsError(try LinkWizard.getIdFrom(url: testURL)) { error in
            XCTAssertEqual(error as! LinkWizardError, LinkWizardError.pocketCastsLink_innerApplePodcastsLinkIsInvalid)
        }
    }
    
    // Spotify
    func test_getIdFromUrl_whenURLIsSpotifyURL_shouldThrowException() throws {
        let testURL = "https://open.spotify.com/show/05mXtsHUlelamU3w0nGJ8a?si=3cf4a99f2cf14f39"

        XCTAssertThrowsError(try LinkWizard.getIdFrom(url: testURL)) { error in
            XCTAssertEqual(error as! LinkWizardError, LinkWizardError.spotifyLink)
        }
    }
    
    // Off the curve
    func test_getIdFromUrl_whenURLIsEmpty_shouldThrowException() throws {
        let testURL = ""

        XCTAssertThrowsError(try LinkWizard.getIdFrom(url: testURL)) { error in
            XCTAssertEqual(error as! LinkWizardError, LinkWizardError.emptyURL)
        }
    }
    
    func test_getIdFromUrl_whenURLIsRandomHTTPURL_shouldThrowException() throws {
        let testURL = "http://twitter.com/Apple"

        XCTAssertThrowsError(try LinkWizard.getIdFrom(url: testURL)) { error in
            XCTAssertEqual(error as! LinkWizardError, LinkWizardError.notAValidURL)
        }
    }
    
    func test_getIdFromUrl_whenURLIsRandomHTTPSURL_shouldThrowException() throws {
        let testURL = "https://twitter.com/Apple"

        XCTAssertThrowsError(try LinkWizard.getIdFrom(url: testURL)) { error in
            XCTAssertEqual(error as! LinkWizardError, LinkWizardError.notAValidURL)
        }
    }
    
    // MARK: - Fix URL From HTTP To HTTPS
    func test_fixURLfromHTTPToHTTPS_whenHTTPURLPassed_shouldReturnHTTPSURL() throws {
        let url = "http://feeds.soundcloud.com/users/soundcloud:users:110149054/sounds.rss"
        
        let urlAjustado = try LinkWizard.fixURLfromHTTPToHTTPS(url)
        XCTAssertEqual(urlAjustado, "https://feeds.soundcloud.com/users/soundcloud:users:110149054/sounds.rss")
    }

}
